server.port=8082
spring.application.name=api-gateway
eureka.client.service-url.defaultZone=http://localhost:8010/eureka

spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].uri = lb://users-ws
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

spring.cloud.gateway.routes[1].id = users-ws
spring.cloud.gateway.routes[1].uri = lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[2].id = users-ws-login
spring.cloud.gateway.routes[2].uri = lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ws/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[3].id = users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[4].id = users-ws-h2-console
spring.cloud.gateway.routes[4].uri = lb://users-ws
spring.cloud.gateway.routes[4].predicates[0]=Path=/users-ws/h2-console
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[5].id = users-ws-actuator
spring.cloud.gateway.routes[5].uri = lb://users-ws
spring.cloud.gateway.routes[5].predicates[0]=Path=/users-ws/actuator/**
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1]=RewritePath=/users-ws/(?<segment>.*), /$\{segment}

#connection for rabbitmq
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

spring.config.import=configserver:http://localhost:8012

management.endpoint.gateway.enabled=true
management.endpoints.web.exposure.include=gateway,health,mappings
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#token.secret=dgjorufhrsnjdu438fkdj38fdmcv7dm3ckvhrsnjjuwelueivhe848fhedldh5ndk



##spring.cloud.gateway.discovery.locator.enabled=true
##spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#
#
## index of round and[0] index of first route and then incremental
## id to create unique id for route
#spring.cloud.gateway.routes[0].id= users-status-check
#
## you can directly hardcode the uri here but use lb for inbuilt load balancer to use eureka name
#spring.cloud.gateway.routes[0].uri= lb://users-ws
#
## cause there will be more than one predicates we are adding index [0] and then [1]
## this is a java 8 predicate to match the headers pf http request and route the request to a destination uri
## like if else statement, if condition in this predicate matches, then the request will be routed to a destination uri
#spring.cloud.gateway.routes[0].predicates[0]=Path=users-ws/users/status/check
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#
## to remove request header cookie
## the reason to do is to remove all request cookies downstream
## microservices dont need cookies at all
## all it needs is JWT token so we can apply a filter that removes request header called cookie
#spring.cloud.gateway.routes[0].filters[0].=RemoveRequestHeader=Cookie
#
#
## RewritePath is an internal filter
## needs two filters
## the first value is an external path
## the second one is the internal path or rewrite path
## Spring Cloud API Gateway will route this request to the internal path
## this must exist meaning that our microservice should have a rest controller class that handles users/status/check
## RewritePath=/users-ws/users/status/check, users/status/check
##localhost:8082/users-ws/users/status/check redirects to internal users/status/check
##spring.cloud.gateway.routes[0].filters[0].=RewritePath=/users-ws/(?<segment>.*),/$\{segment}
#
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
